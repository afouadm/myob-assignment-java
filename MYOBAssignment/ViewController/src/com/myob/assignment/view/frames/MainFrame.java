package com.myob.assignment.view.frames;

import java.io.File;

import java.io.IOException;
import com.myob.assignment.model.engine.Engine;

import com.myob.assignment.model.engine.TaxCalculator;

import com.myob.assignment.view.models.ResultsTableModel;

import java.util.ArrayList;

import java.util.Observable;
import java.util.Observer;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Ahmad
 */
public class MainFrame
    extends javax.swing.JFrame implements Observer
{

    /** Creates new form MainFrame */
    public MainFrame()
    {
        initComponents();
    }
    
    private String csvFilePath = "";
    private Engine engine;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents()//GEN-BEGIN:initComponents
    {

        csvFileChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        filePathTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        startButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();

        csvFileChooser.setAcceptAllFileFilterUsed(false);
        csvFileChooser.setDialogTitle("Select CSV File");
        csvFileChooser.setFileFilter(new FileNameExtensionFilter(
            "CSV Files", "csv"));

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setLocationByPlatform(true);

    jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel1.setText("Input File: ");

    filePathTextField.setEditable(false);
    filePathTextField.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            filePathTextFieldActionPerformed(evt);
        }
    });
    filePathTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener()
    {
        public void propertyChange(java.beans.PropertyChangeEvent evt)
        {
            filePathTextFieldPropertyChange(evt);
        }
    });

    browseButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    browseButton.setText("Browse");
    browseButton.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            browseButtonActionPerformed(evt);
        }
    });

    resultsTable.setModel(new ResultsTableModel());
    jScrollPane1.setViewportView(resultsTable);

    startButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    startButton.setText("Start");
    startButton.setEnabled(false);
    startButton.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            startButtonActionPerformed(evt);
        }
    });

    exportButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    exportButton.setText("Export");
    exportButton.setEnabled(false);
    exportButton.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            exportButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(filePathTextField)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(filePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(browseButton))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(startButton)
                .addComponent(exportButton))
            .addContainerGap())
    );

    pack();
    }//GEN-END:initComponents

    private void filePathTextFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_filePathTextFieldActionPerformed
    {//GEN-HEADEREND:event_filePathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathTextFieldActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
    {//GEN-HEADEREND:event_browseButtonActionPerformed
        int selection = csvFileChooser.showOpenDialog(this);
        if(selection == JFileChooser.APPROVE_OPTION)
        {
            File csvFile = csvFileChooser.getSelectedFile();
            try
            {
                csvFilePath = csvFile.getCanonicalPath();
                filePathTextField.setText(csvFilePath);
                startButton.setEnabled(true);
                exportButton.setEnabled(false);
            }
            catch (IOException e)
            {
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void filePathTextFieldPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_filePathTextFieldPropertyChange
    {//GEN-HEADEREND:event_filePathTextFieldPropertyChange

    }//GEN-LAST:event_filePathTextFieldPropertyChange

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
    {//GEN-HEADEREND:event_startButtonActionPerformed
        exportButton.setEnabled(false);
        ArrayList<Observer> observers = new ArrayList<Observer>();
        observers.add(this);
        engine = new Engine(csvFilePath, observers);
        new Thread(engine).start();
        startButton.setEnabled(false);
    }//GEN-LAST:event_startButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exportButtonActionPerformed
    {//GEN-HEADEREND:event_exportButtonActionPerformed
        int selection = csvFileChooser.showSaveDialog(this);
        if(selection == JFileChooser.APPROVE_OPTION)
        {
            File csvFile = csvFileChooser.getSelectedFile();
            try
            {
                if(engine.export(csvFile.getCanonicalPath()))
                    JOptionPane.showMessageDialog(this, "Results exported successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                else
                    JOptionPane.showMessageDialog(this, "Error exporting CSV file", "Error", JOptionPane.ERROR_MESSAGE);
            }
            catch (IOException e)
            {
                JOptionPane.showMessageDialog(this, "Error exporting CSV file", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_exportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        /*try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info: javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainFrame().setVisible(true);
            }
            
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JFileChooser csvFileChooser;
    private javax.swing.JButton exportButton;
    private javax.swing.JTextField filePathTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg)
    {
        TaxCalculator calculator = (TaxCalculator)o;
        if(calculator.getTotalEntries() == -1)
        {
            JOptionPane.showMessageDialog(this, "Error Parsing the CSV file", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            progressBar.setMaximum(calculator.getTotalEntries());
            progressBar.setValue(calculator.getCompletedEntries());
            if(calculator.getCompletedEntries() == calculator.getTotalEntries())
            {
                ((ResultsTableModel)resultsTable.getModel()).setTableData(calculator.getOutputs());
                ((ResultsTableModel)resultsTable.getModel()).fireTableDataChanged();
                exportButton.setEnabled(true);
            }
        }
     }
}
